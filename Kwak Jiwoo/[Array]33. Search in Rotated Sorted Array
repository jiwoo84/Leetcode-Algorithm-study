// 1차 풀이 => 통과 but o(n)
var search = function (nums, target) {
  let start = 0;
  let end = nums.length - 1;
  let middle = 0;

  // 회전축 구하기
  for (let i = 0; i < nums.length; i++) {
    if (nums[i] > nums[i + 1]) {
      if (target === nums[0]) return 0;
      else if (target > nums[0]) {
        start = 1;
        end = i;
      } else {
        start = i + 1;
        end = nums.length - 1;
      }
    }
  }

  while (start <= end) {
    middle = Math.floor((start + end) / 2);
    if (nums[middle] === target) return middle;
    else if (nums[middle] > target) end = middle - 1;
    else start = middle + 1;
  }

  return -1;
};

// 2차 풀이 => discussion 참고
var search = function(nums, target) {
    let left = 0;
    let right = nums.length-1;
    let mid = null;
    
    while(left <= right) {
        
        mid = Math.floor((left+right)/2);

        if(nums[mid] === target) return mid;
        
        // mid의 왼쪽 부분이 정렬되어 있음
        if(nums[left] <= nums[mid]) { 
            // target이 왼쪽 부분에 속해 있음 (= 붙이지 않으면 target이 nums[left]인 경우 처리 불가 )
            if(nums[left] <= target && target <= nums[mid]) { 
                right = mid-1;
            }
            else left = mid+1; // 아니라면 오른쪽 부분으로 옮김
        }
        
        // mid의 오른쪽 부분이 정렬되어 있음
        else {
            // target이 오른쪽 부분에 속해 있음
            if(nums[right] >= target && target >= nums[mid]) { 
                left = mid+1;
            }
            else right = mid-1; // 아니라면 왼쪽으로 옮김
        }
    }
    return -1;
};

// mid를 기준으로 정렬된 부분을 찾고, 거기에 target이 속해있는지 탐색하는 이진탐색
// [3, 4, 5, 6, 7, 1, 2] -> [3, 4, 5] [ 6, 7, 1, 2] => 왼쪽이 정렬
// [6, 7, 1, 2, 3, 4, 5] -> [6, 7, 1] [2, 3, 4, 5] => 오른쪽이 정렬
// [1, 2, 3, 4, 5, 6, 7] -> [1, 2, 3] [4, 5, 6, 7] => 둘 다 정렬

// 회전축이 인덱스0 -> 회전하지 않음 => 이런 경우도 고려해야 함
