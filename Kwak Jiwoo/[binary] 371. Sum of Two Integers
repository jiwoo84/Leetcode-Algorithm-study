// 1차 풀이: 직접 가산기 만들어봄 => 실패
function binaryCarculator(a, b) {

    a = a.toString(2).split('');  // 이진수로 변환 -> 배열로 변환
    b = b.toString(2).split(''); 

    let next = 0; // 올림수
    let result = ''; // 더해진 이진수 저장

    while((a.length || b.length) > 0) { // 모두 배열의 값이 사라질 때까지 반복


        // 따로 padstart로 0 채우지 않고 비어있을 경우 0으로 처리
        let [aNum, bNum] = [+(a.pop() || '0'), +(b.pop() || '0')]; 

        if((aNum && bNum) === 1) { // 둘 다 1이면

            if(next === 1) result = '1' + result; // 올림수 있다면
            else { // 올림수 없다면
                next = 1;
                result = '0' + result;
            }
        }

        else if ((aNum || bNum) === 1) { // 하나만 1이면
            if(next === 1) { // 올림수 있다면
                next = 1;
                result = '0' + result;
            }
            else result += '1';
        }

        else {
            if(next === 1) {
                next = 0;
                result = '1' + result;
            } else result += '0';
        }
    }

    // 남은 올림수 있다면 맨 앞에 넣어줌 => 이진수 반환
    return next ? next + result : result;
}

// 빼기 계산하기 => 2의 보수로 변환하는 함수
function makeTwosComplement(num) {

    let binary = num.toString(2).padStart(10, '0');
    let result = '';

    for(let s of binary) {
        if(s === '0') result += '1'
        else result += '0'
    }

    // 끝에 1을 더한 후, 숫자로 변환
    return parseInt(binaryCarculator(parseInt(result,2), 1), 2);
}

var getSum = function(a, b) {

    let result = '';

    if(a >= 0 && b >= 0) return parseInt(binaryCarculator(a,b),2);
    else if(a < 0 && b > 0) return parseInt(binaryCarculator(makeTwosComplement(-a), b).slice(1), 2);
    else if(a > 0 && b < 0) return parseInt(binaryCarculator(a, makeTwosComplement(-b)).slice(1),2);
    else -parseInt(binaryCarculator(-a, -b), 2);
};

// 2차 풀이
var getSum = function(a, b) {
      let carry;
      while((a & b) !== 0){ // 4. 올림수 계산이 필요없을 때까지 반복
          carry = (a & b) << 1; // 1. 올림수 계산
          a = a ^ b; // 2. 계산
          b = carry; // 3. 다음 루프에서 계산하도록 b를 올림수로 바꿈
      }
      return a ^ b; // 5. 올림수가 없다면 최종 계산
};
